name: CI

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    name: Build application for NanoS, X and S+
    strategy:
      matrix:
        include:
          - SDK: "$NANOS_SDK"
            model: nanos
          - SDK: "$NANOX_SDK"
            model: nanox
          - SDK: "$NANOSP_SDK"
            model: nanosp
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest
    steps:
      - uses: actions/checkout@v3
      - name: Build app
        run: |
          make clean
          make DEBUG=1 BOLOS_SDK=${{ matrix.SDK }}
          mv bin/app.elf "bin/${{ matrix.model }}.elf"
      - name: Upload app binary
        uses: actions/upload-artifact@v3
        with:
          name: apps-debug
          path: bin/

  scan-build:
    name: Clang Static Analyzer
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

    steps:
      - uses: actions/checkout@v3

      - name: Build with Clang Static Analyzer
        run: |
          make clean
          scan-build --use-cc=clang -analyze-headers -enable-checker security -enable-checker unix -enable-checker valist -o scan-build --status-bugs make default
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: scan-build
          path: scan-build

  coverity-scan:
    name: Coverity Scan
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-scanner:latest

    steps:
      - uses: actions/checkout@v3

      - name: Build with cov-build
        run: |
          make clean
          cov-build --dir cov-int make default

      - name: Submit the result to Coverity Scan
        run: |
          tar czvf cov-int.tar.gz cov-int
          curl \
            --form token=$TOKEN \
            --form email=$EMAIL \
            --form file=@cov-int.tar.gz \
            --form version=master \
            --form description="IoTeX app" \
            https://scan.coverity.com/builds?project=jibeee%2Fapp-iotex
        env:
          EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}
          TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
