#!/usr/bin/env python
from ledgerblue.comm import getDongle
from ledgerblue.commException import CommException
from secp256k1 import PublicKey
import time
import sys

fake_pb_data = {
    "tx1":  "0801100118c09a0c2201315296010a033130301229696f3134356d766e677861736a70366473733878333877323864396c377235"
            "7766647638796c7277781a6400000000000000000000000000000000000000000000000000000000000000000000000000000000"
            "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            "0000000000000000",

    "tx2": "0801100118a08d06220d3130303030303030303030303052400a13313030303030303030303030303030303030301229696f31383"
           "7777a703038766e686a6a706b79646e723937716c68386b683064706b6b797466616d386a",

    "tx3": "0801100318a08d06220d3130303030303030303030303052350a0831303030303030301229696f313365736c6d306165366d64726"
           "a32757a3763323630616a363730776b6479777461796533676b",

    # 0.5
    "tx4": "080110021803220134523f0a123530303030303030303030303030303030301229696f313474773867796e337038763566636d7668"
           "346330773837393772796a726c72766e7372367a66",

    # 5
    "tx5": "08011002180322013452400a13353030303030303030303030303030303030301229696f313474773867796e337038763566636d76"
           "68346330773837393772796a726c72766e7372367a66",

    # 1.5
    "tx6": '08011002180322013452400a13313530303030303030303030303030303030301229696f313474773867796e337038763566636d76'
           '68346330773837393772796a726c72766e7372367a66',

    # 1000 vita
    "tx_vita_1": "080110021803220d3130303030303030303030303062711229696f31687036793465717239306a37746d756c34773277613"
                 "8706d3777783436326871306d673474771a44"
                 "a9059cbb0000000000000000000000008d2bff1be58d2bffb0e6e9278b2d7039db05b083"
                 "00000000000000000000000000000000000000000000003635c9adc5dea00000",

    # 10.012301 * 10**18
    "tx_vita_2": "080110021803220d3130303030303030303030303062711229696f31687036793465717239306a37746d756c34773277613"
                 "8706d3777783436326871306d673474771a44"
                 "a9059cbb00000000000000000000000070d44b8c9d2c9a3689cdd14c015b2291d4452176"
                 "0000000000000000000000000000000000000000000000008af2d6b64949d000",
    # 3
    "tx_vita_3": '080110021803220d3130303030303030303030303062711229696f31687036793465717239306a37746d756c34773277613'
                 '8706d3777783436326871306d673474771a44'
                 'a9059cbb00000000000000000000000070d44b8c9d2c9a3689cdd14c015b2291d4452176'
                 '0000000000000000000000000000000000000000000000000000000000000003',

    # 1.0234 * 10**18
    "tx_vita_4": '080110021803220d3130303030303030303030303062711229696f31687036793465717239306a37746d756c34773277613'
                 '8706d3777783436326871306d673474771a44'
                 'a9059cbb00000000000000000000000070d44b8c9d2c9a3689cdd14c015b2291d4452176'
                 '0000000000000000000000000000000000000000000000000e33d8e0b7228000',

    # 123456789
    "tx_vita_5": '080110021803220d3130303030303030303030303062711229696f31687036793465717239306a37746d756c34773277613'
                 '8706d3777783436326871306d673474771a44'
                 'a9059cbb000000000000000000000000779b6209a929e127e9d50a5166ae77e80a77012d'
                 '00000000000000000000000000000000000000000000000000000000075bcd15',

    # 100000000000000000000000000000000000000000000000000000000000000000000000000001 (10**77 + 1)
    "tx_vita_101": '080110021803220d3130303030303030303030303062711229696f31687036793465717239306a37746d756c34773277613'
                   '8706d3777783436326871306d673474771a44'
                   'a9059cbb000000000000000000000000779b6209a929e127e9d50a5166ae77e80a77012d'
                   'dd15fe86affad91249ef0eb713f39ebeaa987b6e6fd2a0000000000000000001',

    "tx_vita_max": '080110021803220d3130303030303030303030303062711229696f31687036793465717239306a37746d756c34773277613'
                   '8706d3777783436326871306d673474771a44'
                   'a9059cbb000000000000000000000000779b6209a929e127e9d50a5166ae77e80a77012d'
                   'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',

    "tx_rain_8": '080110021803220d3130303030303030303030303062711229696f3138643637353973376b34706777383432383434766639'
                 '756b74726376666a6477656b773965611a44'
                 'a9059cbb000000000000000000000000779b6209a929e127e9d50a5166ae77e80a77012d'
                 '0000000000000000000000000000000000000000000000000e33d8e0b7228000',

    "tx_bob_10": '080110021803220d3130303030303030303030303062711229696f31667339707930636b3065386a6a796c3065683773716'
                 'a353672306b6e617377643073373436641a44'
                 'a9059cbb000000000000000000000000779b6209a929e127e9d50a5166ae77e80a77012d'
                 '0000000000000000000000000000000000000000000000000e33d8e0b7228000',

    "tx_jrpc_4": '080110021803220d3130303030303030303030303062711229696f316d3433647a753471356b6c6d6875397966667065727'
                 '9727567753864616735386b71397379751a44'
                 'a9059cbb000000000000000000000000779b6209a929e127e9d50a5166ae77e80a77012d'
                 '0000000000000000000000000000000000000000000000000e33d8e0b7228000',

    "tx_jrpc_0.3": '080110021803220d3130303030303030303030303062711229696f316d3433647a753471356b6c6d6875397966667065727'
                   '9727567753864616735386b71397379751a44'
                   'a9059cbb000000000000000000000000779b6209a929e127e9d50a5166ae77e80a77012d'
                   '0000000000000000000000000000000000000000000000000000000000000bb8',

    "tx_jrpc_3": '080110021803220d3130303030303030303030303062711229696f316d3433647a753471356b6c6d6875397966667065727'
                 '9727567753864616735386b71397379751a44'
                 'a9059cbb000000000000000000000000779b6209a929e127e9d50a5166ae77e80a77012d'
                 '0000000000000000000000000000000000000000000000000000000000007530',

    "tx_jrpc_1.3": '080110021803220d3130303030303030303030303062711229696f316d3433647a753471356b6c6d6875397966667065727'
                   '9727567753864616735386b71397379751a44'
                   'a9059cbb000000000000000000000000779b6209a929e127e9d50a5166ae77e80a77012d'
                   '00000000000000000000000000000000000000000000000000000000000032c8',

    "tx_aave-matic_18": '080110021803220d3130303030303030303030303062711229696f313474773867796e337038763566636d766834'
                        '6330773837393772796a726c72766e7372367a661a44'
                        'a9059cbb000000000000000000000000779b6209a929e127e9d50a5166ae77e80a77012d'
                        '0000000000000000000000000000000000000000000000000e33d8e0b7228000',

    # iotex.ActionCore(version=1, nonce=2, gasLimit=3, gasPrice="4",
    # execution=iotex.Execution(amount="123456789", data=bytes(range(128)), contract="test"))
    "exe": "0801100218032201346294010a093132333435363738391204746573741a8001000102030405060708090a0b0c0d0e0f1011121314"
           "15161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f40414243444546474849"
           "4a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f"
           "707172737475767778797a7b7c7d7e7f",

    "hello": "68656c6c6f",

    "empty": "",

    "data64": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132"
              "333435363738393a3b3c3d3e3f",

    "data65": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132"
              "333435363738393a3b3c3d3e3f40",

    "data128": "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132"
               "333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465"
               "666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f",

    # """
    # 1. StakeCreate
    # version=1,nonce=2,gasLimit=3,gasPrice=4
    # candidateName: "testbot",
    # stakedAmount: "5",
    # stakedDuration: 6,
    # autoStake: true,
    # payload: "hello"
    # """
    "StakeCreate": "080110021803220134c202160a0774657374626f74120135180620012a0485e965a0",

    # """
    # 2. StakeUnstake
    # version=1,nonce=2,gasLimit=3,gasPrice=4
    # bucketIndex: 10,
    # payload: "world"
    # """
    "StakeUnstake": "080110021803220134ca0208080a1204c28ae574",

    # """
    # 3. StakeWithdraw
    # version=1,nonce=2,gasLimit=3,gasPrice=4
    # bucketIndex: 10,
    # payload: "world"
    # """
    "StakeWithdraw": "080110021803220134d20208080a1204c28ae574",

    # """
    # 4. StakeAddDeposit
    # version=1,nonce=2,gasLimit=3,gasPrice=4
    # bucketIndex: 10,
    # amount: "200",
    # payload: "world"
    # """
    "StakeAddDeposit": "080110021803220134da020d080a12033230301a04c28ae574",

    # """
    # 5. StakeRestake
    # version=1,nonce=2,gasLimit=3,gasPrice=4
    # bucketIndex: 10,
    # stakedDuration: 20,
    # autoStake: true,
    # payload: "world"
    # """
    "StakeRestake": "080110021803220134e2020c080a101418012204c28ae574",
  
    # """
    # 6. StakeChangeCandidate
    # version=1,nonce=2,gasLimit=3,gasPrice=4
    # bucketIndex: 10,
    # candidateName: "testbot",
    # payload: "world"
    # """
    "StakeChangeCandidate": "080110021803220134ea0211080a120774657374626f741a04c28ae574",

    # """
    # 7. StakeTransferOwnership
    # version=1,nonce=2,gasLimit=3,gasPrice=4
    # bucketIndex: 10,
    # voterAddress: "io24jyvf4stclr80nmgx9hrkdr0c4hptfwl7ljxdz",
    # payload: "world"
    # """
    "StakeTransferOwnership": "080110021803220134f20233080a1229696f32346a797666347374636c7238306e6d67783968726b"
                              "647230633468707466776c376c6a78647a1a04c28ae574",

    # """
    # 8. CandidateRegister
    # version=1,nonce=2,gasLimit=3,gasPrice=4
    # candidate: {
    #   name: "testbot",
    #   operatorAddress: "io14jyvf4stclr80nmgx9hrkdr0c4hptfwl7ljxdz",
    #   rewardAddress: "io54jyvf4stclr80nmgx9hrkdr0c4hptfwl7ljxdz"
    # },
    # stakedAmount: "1000",
    # stakedDuration: 30,
    # autoStake: false,
    # ownerAddress: "io24jyvf4stclr80nmgx9hrkdr0c4hptfwl7ljxdz",
    # payload: "world"
    # """
    "CandidateRegister": "080110021803220134fa029a010a5f0a0774657374626f741229696f31346a797666347374636c7238306e6d"
                         "67783968726b647230633468707466776c376c6a78647a1a29696f35346a797666347374636c7238306e6d67"
                         "783968726b647230633468707466776c376c6a78647a120431303030181e2a29696f32346a79766634737463"
                         "6c7238306e6d67783968726b647230633468707466776c376c6a78647a3204c28ae574",

    # """
    # 9. CandidateUpdate
    # version=1,nonce=2,gasLimit=3,gasPrice=4
    # name: "testbot",
    # operatorAddress: "io14jyvf4stclr80nmgx9hrkdr0c4hptfwl7ljxdz",
    # rewardAddress: "io54jyvf4stclr80nmgx9hrkdr0c4hptfwl7ljxdz"
    # """
    "CandidateUpdate": "08011002180322013482035f0a0774657374626f741229696f31346a797666347374636c7238306e6d677839687"
                       "26b647230633468707466776c376c6a78647a1a29696f35346a797666347374636c7238306e6d67783968726b64"
                       "7230633468707466776c376c6a78647a",

    "cd": "080110021803220d31303030303030303030303030fa02a4010a5e0a06616d616f726b1229696f31687036793465717239306a37746d756c347732776138706d3777783436326871306d673474771a29696f316d3433647a753471356b6c6d68753979666670657279727567753864616735386b71397379751214313030303030303030303030303030303030303118e50f2a29696f316d3433647a753471356b6c6d68753979666670657279727567753864616735386b7139737975"
    }


def sign(trantosign, raw_msg=False):
    # Get version
    print("Get Version ...")
    dongle = getDongle(True)
    osversion = dongle.exchange(bytearray.fromhex("E001000000"))
    print("Os version:{}\n".format(osversion.hex()))

    # Derivation Path = 44'/304'/0'/0/0
    DerivationPath = bytearray.fromhex("052c00008030010080000000800000000000000000")
    # HRP = "io"
    HRP = bytearray.fromhex("696f")

    # Get public key 44'/304'/{account}0'/0/{index}0
    print("Get public key ...")
    publickey = dongle.exchange(bytearray.fromhex("55010000") + bytes([len(DerivationPath)]) + DerivationPath)
    print("public key: {}\n".format(publickey.hex()))

    # Get address 44'/304'/{account}0'/0/{index}0
    print("Get Address ...")
    args_len = len(HRP) + len(DerivationPath) + 1
    address = dongle.exchange(bytearray.fromhex("55040000") + bytes([args_len, len(HRP)]) + HRP + DerivationPath)

    print("public key(short): {}".format(address[:32].hex()))
    print("address: {}\n".format(address[33:].hex()))

    # sign key 44'/304'/{account}0'/0/{index}0
    print("\nSign request (1 of 2 package):...\n")
    initsign = dongle.exchange(bytearray.fromhex("5502010215052c00008030010080000000800000000000000000"))
    print("Sign request (2 of 2 package):...\n")

    # Action name or raw data
    ins = "55050202" if raw_msg else "55020202"
    signature = dongle.exchange(bytearray.fromhex(ins) + bytes([len(trantosign)]) + trantosign)
    print("signature resp: {}".format(signature.hex()))


if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] in fake_pb_data:
            action = sys.argv[1]
            raw_msg = True if len(sys.argv) >= 3 and sys.argv[2] == "raw_msg" else False
            print("Action: {}, length:{}, raw msg: {}".format(
                action, len(bytearray.fromhex(fake_pb_data.get(action))), raw_msg)
            )
            sign(bytearray.fromhex(fake_pb_data.get(action)), raw_msg)
        else:
            sign(bytearray.fromhex(sys.argv[1]))
    else:
        print("Please select action:\n\t{}".format("\n\t".join(sorted(fake_pb_data.keys()))))
        sys.exit(0)
